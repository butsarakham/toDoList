{"version":3,"sources":["logo.svg","ListItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","item","map","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","addItem","bind","handleInput","preventDefault","newItem","this","setState","Date","now","filteredItem","filter","console","log","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,6MCgC5BC,MA3Bf,SAAkBC,GACd,IACMD,EADOC,EAAMC,KACGC,KAAI,SAAAD,GAElB,OAAO,yBAAKE,UAAU,OAAOC,IAAKH,EAAKG,KACnC,2BAAG,2BAAOC,KAAK,OAAOC,GAAIL,EAAKG,IAC/BG,MAAON,EAAKO,KACZC,SAAU,SAACC,GACXV,EAAMW,UAAUD,EAAEE,OAAOL,MAAMN,EAAKG,QAChC,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAC3BU,KAAK,QACLC,QAAS,kBAAMd,EAAMe,WAAWd,EAAKG,cAQjD,OAAO,6BACH,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BlB,K,eCpBrBmB,IAAQC,IAAIC,K,IAiFGC,E,kDA9Eb,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDsB,MAAQ,CACXrB,KAAK,GACLsB,YAAY,CACVf,KAAK,GACLJ,IAAI,KAGR,EAAKoB,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZD,E,oDAcVf,GACNA,EAAEiB,iBACF,IAAMC,EAAUC,KAAKP,MAAMC,YAC3B,GAAmB,KAAhBK,EAAQpB,KAAW,CACpB,IAAMP,EAAI,sBAAO4B,KAAKP,MAAMrB,MAAlB,CAAwB2B,IACpCC,KAAKC,SAAS,CACZ7B,KAAMA,EACNsB,YAAY,CACVf,KAAK,GACLJ,IAAI,S,kCAKEM,GACVmB,KAAKC,SAAS,CACZP,YAAY,CACVf,KAAME,EAAEE,OAAOL,MACfH,IAAK2B,KAAKC,W,iCAIL5B,GACT,IAAM6B,EAAcJ,KAAKP,MAAMrB,KAAKiC,QAAO,SAAAjC,GAAI,OAC7CA,EAAKG,MAAMA,KACbyB,KAAKC,SAAS,CACZ7B,KAAMgC,M,gCAIAzB,EAAKJ,GACb+B,QAAQC,IAAI,QAAQP,KAAKP,MAAMrB,MAC/B,IAAMA,EAAO4B,KAAKP,MAAMrB,KACxBA,EAAKC,KAAI,SAAAD,GACJA,EAAKG,MAAMA,IACZ+B,QAAQC,IAAInC,EAAKG,IAAK,OAAOA,GAC7BH,EAAKO,KAAMA,MAGfqB,KAAKC,SAAS,CACZ7B,KAAMA,M,+BAMV,OACE,yBAAKE,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa+B,SAAUR,KAAKL,SACnC,2BAAOnB,KAAK,OAAOiC,YAAY,aAAa/B,MAAQsB,KAAKP,MAAMC,YAAYf,KAAMC,SAAUoB,KAAKH,cAChG,4BAAQrB,KAAK,UAAb,QAEF,2BAAIwB,KAAKP,MAAMrB,KAAKO,MAElB,kBAAC,EAAD,CAAUP,KAAM4B,KAAKP,MAAMrB,KAAMc,WAAYc,KAAKd,WAAYJ,UAAWkB,KAAKlB,kB,GAtEtE4B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.44477170.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItem.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\nfunction ListItem(props){\r\n    const item = props.item;\r\n    const ListItem = item.map(item => \r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n                <p><input type=\"text\" id={item.key} \r\n                value={item.text} \r\n                onChange={(e)=>{\r\n                props.setUpdate(e.target.value,item.key)}}/>                               \r\n                    <span>\r\n                        <FontAwesomeIcon className=\"faicons\" \r\n                        icon='trash'\r\n                        onClick={() => props.deleteItem(item.key)\r\n                        }\r\n                        />\r\n                    </span>\r\n                </p>\r\n                 </div>\r\n        })\r\n\r\n            return <div>\r\n                <FlipMove duration={300} easing=\"ease-in-out\">\r\n                    {ListItem}\r\n                </FlipMove>\r\n    </div>;\r\n         \r\n}\r\nexport default ListItem;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItem from './ListItem'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash)\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      item:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !==\"\"){\n      const item = [...this.state.item, newItem];\n    this.setState({\n      item: item,\n      currentItem:{\n        text:'',\n        key:''\n      }\n    })\n    }\n  }\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  deleteItem(key){\n    const filteredItem= this.state.item.filter(item =>\n      item.key!==key);\n    this.setState({\n      item: filteredItem\n    })\n\n  }\n  setUpdate(text,key){\n    console.log(\"item:\"+this.state.item);\n    const item = this.state.item;\n    item.map(item=>{      \n      if(item.key===key){\n        console.log(item.key +\"    \"+key)\n        item.text= text;\n      }\n    })\n    this.setState({\n      item: item\n    })\n    \n   \n  }\n render(){\n  return (\n    <div className=\"App\">\n      <header>\n        <form id=\"to-do-form\" onSubmit={this.addItem}>\n          <input type=\"text\" placeholder=\"Enter task\" value= {this.state.currentItem.text} onChange={this.handleInput}></input>\n          <button type=\"submit\">Add</button>\n        </form>\n        <p>{this.state.item.text}</p>\n        \n          <ListItem item={this.state.item} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n        \n      </header>\n    </div>\n  );\n }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}